n
@seeker.filter 'color', 'Red'
@seeker
exit
@seeker
@seeker.filter 'color', 'Red'
n
AutoSeeker.median_mileage(@seeker.data)
n
AutoSeeker.median_mileage(@seeker.data).must_equal 27.0
AutoSeeker.median_mileage(@seeker.data).must_equal 26.0
AutoSeeker.median_mileage(@seeker).must_equal 26.0
@seeker
exit
result.collect(&:color)
result.select {|x| p x.color }
result.select {|x| x.color }
result 
result = @seeker.filter 'color', 'Red'
result 
@seeker.filter 'color', 'Red'
exit
@seeker
@seeker.filter 'color', 'Red'
@seeker.data.collect(&:color).uniq
@seeker
@seeker.filter 'color', 'Red'
@seeker.collect(&:color).uniq
@seeker.autos.collect(&:color).uniq
@seeker.filter 'color', 'Red'
n
exit
gas
n
fuels
exit
fuels
exit
n
cars
n
cars
n
cars
n
cars
k
k.fuel
n
exit
k.name
k.mileage
k.price
k.fuel
k.color
k
n
exit
price
n
price
n
exit
price.select {|x| [] << x.color  }
price.select {|x| [] << x.color, x.price  }
price.select {|x| print x.color }
price.map {|x| print x.color }
price.map {|x| print x }
price.map {|x| print }
price.map {|x| {'color' = x.color} }
price.map {|x| {:color = x.color} }
price.map {|x| :color = x.color }
price.class
price
self.data.select {|x| x.price }
price
n
exit
price
n
exit
self.data.map {|x| x.price }
self.data.select {|x| x.price }
self.data.select {|x| x[:price] }
self.data.collect {|x| x.price <= 20000 }
self.data.collect {|x| x.send('price') <= 20000 }
self.data.collect(&:price)
self.data.collect(&:price)}
self.data.each {|x| x[:price]}
self.data
self
n
exit
self
self.send('data')
self.data
self
n
self
seeker
exit
seeker
exit
seeker.all {|k| print k}
seeker.each {|k| print k}
seeker
n
seeker
n
exit
price
n
prices
n
autos
@data
exit
price
n
price
n
exit
price
n
exit
price
n
exit
price = AutoSeeker.price_filter(data, 10000, 20000)
price
n
price
n
exit
price.each {|x| print x[:price]}
price.each {|x| x[:price]}
price.class
price.sort
price
n
price
n
exit
price
n
price
price = AutoSeeker.price_filter(data, 10000, 20000)
n
price = AutoSeeker.price_filter(data, 4, 10)
n
exit
data.each {|x| print x[:price]}
data
price = AutoSeeker.price_filter(data, 4, 10)
n
exit
price = AutoSeeker.price_filter(data, 10000.0, 20000.56)
n
exit
self
self.to_s.each {|k| p k }
self.to_s
self.to_a
self.collect(&:price)
self.class.superclass
self.class.class.class
self.class.class
self.each {|k| p k }
self.class
self
n
p
seeker.price_filter(4,10)
seeker.price_filter(4, 10)
n
exit
seeker.price_filter(1000, 2000)
seeker
n
exit
autos
n
autos.collect(&:mileage).sort
autos
exit
autos.collect(&:mileage).sort
autos.collect(&:mileage)
autos.each {|x|  x.send('mileage') }
autos.each {|x|  x.send('mileage').to_s.sort }
autos.each {|x|  x.send('mileage').sort }
autos.each {|x|  x.send('price').to_s.sort }
autos.each {|x|  x.send('price').sort }
autos.each {|x| print x.send('price').class }
autos.each {|x| print x.send('price')}
autos.each {|x| print x.send(price)}
autos.each {|x| print x.send[:price]}
autos.each {|x| print x[:price]}
autos
autos.collect(&:mileage).sort
exit
@data.select {|auto| print auto.send(:price) }
@data.select {|auto| auto.send(:price) }
@data.select {|auto| auto.send(key) == match }
@data
exit
@data.each  {|x| print x.methods}
@data.each  {|x| print x.class}
@data.each  {|x| x.class}
@data.each  {|x| x.methods}
@data.each  {|x| p x.class}
@data.each  {|x| p x.send[:price]}
@data.each  {|x| p x[:price]}
@data.each  {|x| p x}
@data.map {}
@data.each do {|x| x }
@data.each do {|x| p x}
@data
exit
@autos.collect(&:price)
@autos.collect(&:price.to_f)
@autos.collect(&:price)
@autos.collect(&:price).to_f
@autos.collect(&:price)
@autos.collect(:&price)
@autos.each {|x| x[:price].to_f}
@autos.each do |x|
@autos.select {|x| p x }
@autos.select {|x| x[:price].to_f >= lowest || x[:price].to_f <= higest}
exit
seeker.price_filter(10000, 20000)
n
exit
@autos.sort_by(&:price)
n
exit
@autos
n
exit
@seeker.autos
@seeker
@seeker.autos
@seeker
AutoSeeker.median_mileage(@seeker.autos).must_equal 26.0
exit
n
@seeker.autos
@seeker
n
exit
data = CSV.read('foobarnian_autos.csv')
exit
autos.collect(&:mileage).sort
exit
autos 
n
exit
